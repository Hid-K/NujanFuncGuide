#include "stdlib.fc";

int equal_slices(slice a, slice b) asm "SDEQ";

() store_data(
        slice owner_address,
        cell note
) impure
{
    set_data(
            begin_cell()
                    .store_slice(owner_address)
                    .store_ref(note)
                    .end_cell()
    );
}

_ load_data()
{
    slice ds = get_data().begin_parse();

    return(
            ds~load_msg_addr(),
            ds~load_ref()
    );
}

cell get_note() method_id
{
    var (_, note) = load_data();

    return note;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body)
{
    if ( in_msg_body.slice_empty?() ) { return (); } ;; Skip empty messages

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { return (); } ;; Skip bounced messages

    slice sender_address = cs~load_msg_addr();

    var ( owner_address, _ ) = load_data();

    throw_unless( 503, equal_slices( sender_address, owner_address ) );

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if( op == 1 )
            {
                cell new_note = in_msg_body~load_ref();
                store_data(
                        owner_address,
                        new_note
                );
                commit();
                return ();
            }

    throw( 404 );
}